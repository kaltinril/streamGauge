Software Requirements Specification
for
Stream Gauge
Version 1.0 approved
Prepared by Timothy Harrelson and Jeremy Swartwood
Capstone Project, UAA
02/01/2018
 

Table of Contents
Revision History
1.	Introduction
1.1	Purpose
1.2	Intended Audience and Reading Suggestions
1.3	Product Scope
2.	Overall Description
2.1	Product Perspective
2.2	Product Functions
2.3	User Classes and Characteristics
2.4	Operating Environment
2.5	Design and Implementation Constraints
2.6	User Documentation
2.7	Assumptions and Dependencies
3.	External Interface Requirements
3.1	User Interfaces
4.	System Features
4.1	Pixel Classification
5.	Other Nonfunctional Requirements
5.1	Performance Requirements
Appendix A: Glossary


Revision History
Name	Date	Reason For Changes	Version


 
1.	Introduction
1.1	Purpose 

The purpose of this project is to evaluate an image of a body of water and categorize the pixels as either non-water or water using a machine learning classifier.

1.2	Intended Audience and Reading Suggestions

The intended audience consists of two groups of people.
•	The sponsor
•	Development team

1.3	Product Scope

Benefits
•	This product will make the process of automatically determining the height of water cheaper by only requiring lower quality instruments.
•	Setup will be easier with a reduction in required infrastructure like a bridge for the audio or visual gauge.
•	No required survey of land prior to installation.

Objectives
•	Identify the water pixels from an image.
•	Gathering and preparing usable data for training and validation.


2.	Overall Description

2.1	Product Perspective

Currently the methods of identifying water height are expensive.  In some instances this requires trained personal to interpret and gather data and survey land.

This will require much cheaper measuring instruments, less qualified personal, and low maintenance.

2.2	Product Functions

•	The users will enter an image into the product.
•	The product will return a set of data identifying which pixels are water within the image.

2.3	User Classes and Characteristics

The following groups will use the product:
•	Researchers at NOAA and USGS
•	Citizen science organizations

2.4	Operating Environment

Operation will be done on a Windows OS, with limited or non-existent GPU.

2.5	Design and Implementation Constraints

•	This product will be using Python with OpenCV.
•	Images will be provided in a standard image format such as (jpeg, png, etc).
•	The software will only run on the Windows OS.

2.6	User Documentation

A user manual will be created with the following information:
•	The input format to the software.
•	The commands to execute the software.
•	The output format of the software.
•	Details of how the software works will be described.

Code will be commented.

2.7	Assumptions and Dependencies

Assumptions:
•	Python3 installed on the computer with all required modules.
•	Images must be a reasonable size (4MB) 
•	Images are assumed to be within a reasonable lighting condition.
•	Images can be in any standard image format (jpeg, png, etc)

Dependencies:
•	numpy
•	opencv-python


3.	External Interface Requirements

3.1	User Interfaces

  This product will be a Command Line Interface.  There will not be a GUI produced.


4.	System Features

4.1	Pixel Classification

4.1.1	Description and Priority
	Classify sections of an input image (pixels) as either water or non-water.  
	
4.1.2	Stimulus/Response Sequences
	
	User provides an image to the software and gives the command to start the process.
	
4.1.3	Functional Requirements
	
REQ-1:	If the host machine does not have software or modules installed an error message will be provided.
REQ-2:	If an incorrect image format is provided, an error will be presented to the user.
REQ-3:	If an image is too large or too small, an error will be presented.
REQ-4:	When complete the software will produce a binary matrix the same size as the input image.  Where each cell of the matrix signifying a pixel as water or not water.


5.	Other Nonfunctional Requirements

5.1	Performance Requirements

  Users computers are assumed to be weak, meaning they won't have GPU or high Memory space.


Appendix A: Glossary
Pixel Classification – A machine learning algorithm that determines if a pixel falls into a specific category.
